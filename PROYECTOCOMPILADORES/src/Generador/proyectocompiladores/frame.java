/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocompiladores;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import proyectocompiladores.Info_code;
import proyectocompiladores.Lexer;
import proyectocompiladores.Manejador_Archivo;
import proyectocompiladores.Tokens;

/**
 *
 * @author CISCO
 */
public class frame extends javax.swing.JFrame {

    public int colu = 0;
    public int fil = 0;
    public int contador_Error;
    public static String[] base;
    public static String[] reconoce;
    public String Almacena;
    String operacionales = "+,-,*,/,^,**,//,++,--,^^";
    
   
    

    public frame() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jMenu1 = new javax.swing.JMenu();
        jFileChooser2 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jScrollPane5 = new javax.swing.JScrollPane();
        jeditorpanel = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtarearesultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareaingreso = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtareasintactico = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        areahtml = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        areahtml1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jDialog1.setMinimumSize(new java.awt.Dimension(1068, 570));
        jDialog1.setUndecorated(true);

        jScrollPane5.setViewportView(jeditorpanel);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 984, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 99, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ANALIZADOR HTML");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(102, 102, 102));
        setFocusCycleRoot(false);
        setFocusableWindowState(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtarearesultado.setColumns(20);
        txtarearesultado.setRows(5);
        jScrollPane1.setViewportView(txtarearesultado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 301, 385, 160));

        txtareaingreso.setColumns(20);
        txtareaingreso.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtareaingreso.setRows(5);
        txtareaingreso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtareaingresoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txtareaingreso);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 380, 171));

        txtareasintactico.setColumns(20);
        txtareasintactico.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtareasintactico.setRows(5);
        jScrollPane3.setViewportView(txtareasintactico);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 301, 397, 160));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ANALIZADOR  SINTACTICO");
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 467, 191, 47));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("GENERAR HTML");
        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 140, 0));

        areahtml.setColumns(20);
        areahtml.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        areahtml.setRows(5);
        jScrollPane4.setViewportView(areahtml);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 40, 397, 0));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ANALIZADOR  LEXICO");
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 467, 184, 47));

        areahtml1.setColumns(20);
        areahtml1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        areahtml1.setRows(5);
        jScrollPane6.setViewportView(areahtml1);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 380, 170));

        jMenu2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu2.setText("Archivo");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });

        jMenu4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu4.setText("Abrir TXT");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu4);

        jMenu3.setText("Guardar HTML");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu3);

        jMenu5.setText("Limpiar");
        jMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
       
    }//GEN-LAST:event_jMenu2MouseClicked

    private void txtareaingresoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtareaingresoKeyPressed
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
             String ST = txtareaingreso.getText();
         analisis_sintactico s = new analisis_sintactico(new proyectocompiladores.LexerCup(new StringReader(ST)));

        try {
            analizarLexico();
            s.parse();
            txtareasintactico.setText(" no se encontro  errores sintacticos: ");
            txtareasintactico.setForeground(new Color(25, 111, 61));
            areahtml1.setText(s.resultado+"\n");
            //Exportar();
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtareasintactico.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtareasintactico.setForeground(Color.red);
        }

        }
    }//GEN-LAST:event_txtareaingresoKeyPressed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        String ST = txtareaingreso.getText();
        
         analisis_sintactico s = new analisis_sintactico(new proyectocompiladores.LexerCup(new StringReader(ST)));

        try {
            analizarLexico();
            s.parse();
            txtareasintactico.setText(" no se encontro  errores sintacticos: ");
            txtareasintactico.setForeground(new Color(25, 111, 61));
            areahtml1.setText(s.resultado+"\n");
            Exportar();
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtareasintactico.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtareasintactico.setForeground(Color.red);
        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        int iResp;
        String srtTexto = null;
        ArrayList<String> alinea = null;
        Manejador_Archivo fmleerArchiv = null;
        try {
            iResp = jFileChooser1.showOpenDialog(this);
            if (iResp == jFileChooser1.APPROVE_OPTION) {
                fmleerArchiv = new Manejador_Archivo();
                alinea = fmleerArchiv.LeerArchivo(jFileChooser1.getSelectedFile().toString());
                if (alinea.size() > 0) {
                    for (int iIndice = 0; iIndice < alinea.size(); iIndice++) {
                        srtTexto = (String) alinea.get(iIndice);
                        txtareaingreso.append(srtTexto + "\n");

                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu5ActionPerformed
        txtareaingreso.setText("");
    }//GEN-LAST:event_jMenu5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    private void analizarLexico() throws IOException {
        Info_code c = new Info_code();
        File fichero = new File("fichero.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(fichero);
            writer.print(txtareaingreso.getText());
            writer.close();
        } catch (FileNotFoundException e) {
            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, e);
        }
        Reader reader;
        reader = new BufferedReader(new FileReader("fichero.txt"));
        Lexer lex = new Lexer(reader);
        String resultado = "";
        while (true) {
            Tokens tok = lex.yylex();
            if (tok == null) {
                resultado = resultado + "Fin del Analisis";

                txtarearesultado.setText(resultado);
                return;
            }

            switch (tok) {
                case ERROR:
                    resultado = resultado + " ERROR LEXICO: " + lex.lexeme + " " + " " + " LINEA: " + c.linea + " COLUMNA: " + c.columna + "\n";
                    break;

                case Apertura_Documento:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Cierre_Documento:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Encabezado:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Cierre_Encabezado:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Cuerpo:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Fin_Cuerpo:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Titulo:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;

                case Email:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Igual:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Suma:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Resta:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Tabla:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Fila:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Columna:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Cierre_Tabla:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Apertura_Imagen:
                    resultado = resultado + "LEXEMA: " + tok + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Cierre_Imagen:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Fin_Fila:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                
                case Parentesis_Apertura:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Parentesis_Cierre:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Multiplicar:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Punto:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
              
                case Numero:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;

                case Lista_Entrada:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Lista_Fin:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Imprimir:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Punto_y_Coma:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Link:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Diagonal:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Formato_Imagen:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
               case Comillas:
                   resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                case Dos_Puntos:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Estilo:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Negrilla:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Parrafo:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Variable:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Separador:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;
                    case Nombre:
                    resultado = resultado + "LEXEMA: " + tok + "___" + " TOKEN " + lex.lexeme + "\n";
                    break;

                default:
                    resultado = resultado + " LEXEMA: " + tok + "___" + "___" + "___" + "___" + "___" + " TOKEN: " + lex.lexeme + "\n";
            }
        }
    }

     private void Exportar() {
 try {
 JFileChooser archivo = new JFileChooser(System.getProperty("user.dir"));
 archivo.showSaveDialog(this);
 if (archivo.getSelectedFile() != null) {
 try (FileWriter guardado = new FileWriter(archivo.getSelectedFile())) {
 guardado.write(areahtml1.getText());
 JOptionPane.showMessageDialog(rootPane, "Archivo html Generado:  ");
 }
 }
 } catch (IOException ex) {
 JOptionPane.showMessageDialog(this, ex.getMessage());
 }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areahtml;
    private javax.swing.JTextArea areahtml1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JEditorPane jeditorpanel;
    private javax.swing.JTextArea txtareaingreso;
    private javax.swing.JTextArea txtarearesultado;
    private javax.swing.JTextArea txtareasintactico;
    // End of variables declaration//GEN-END:variables
}
