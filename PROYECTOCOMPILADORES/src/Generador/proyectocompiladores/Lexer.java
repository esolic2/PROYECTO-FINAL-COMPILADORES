/* The following code was generated by JFlex 1.7.0 */

package proyectocompiladores;
import static proyectocompiladores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\10\1\11\1\11\1\10\22\0\1\4\1\0\1\55"+
    "\3\0\1\3\1\0\1\43\1\44\1\45\1\40\1\14\1\13\1\46"+
    "\1\15\1\1\1\41\10\1\1\56\1\50\1\5\1\37\1\5\1\3"+
    "\1\12\1\27\1\30\1\26\1\32\1\25\1\24\1\42\1\20\1\16"+
    "\2\2\1\23\1\22\1\17\1\33\1\36\1\2\1\35\1\47\1\21"+
    "\1\34\4\2\1\31\4\0\1\6\1\0\6\7\1\53\2\7\1\51"+
    "\3\7\1\54\1\7\1\52\12\7\1\0\1\3\10\0\1\11\u1fa2\0"+
    "\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\3\1\4"+
    "\1\5\1\6\11\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\6\0\1\3\2\0\1\4"+
    "\12\3\1\0\1\3\3\0\2\3\1\0\6\3\1\20"+
    "\10\3\1\21\1\3\4\0\1\3\2\0\3\3\2\0"+
    "\5\3\1\0\6\3\1\22\3\0\5\3\2\0\5\3"+
    "\1\23\2\0\3\3\4\0\5\3\3\0\2\3\7\0"+
    "\2\3\3\0\1\24\2\0\1\3\3\0\1\25\1\0"+
    "\1\26\1\27\1\30\1\3\3\0\1\31\1\0\1\32"+
    "\2\0\1\33\1\0\1\34\1\35\1\3\1\36\2\0"+
    "\1\37\1\40\1\41\1\0\1\3\1\42\1\43\11\0"+
    "\1\44\1\45\3\0\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\353\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\57\0\57\0\57\0\57\0\57"+
    "\0\u034e\0\57\0\57\0\57\0\u037d\0\353\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\215\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\57"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\57\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u0f9b\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347"+
    "\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf"+
    "\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\57\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\57\0\u1927\0\57\0\57\0\57\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\57\0\u1a12\0\57\0\u1a41\0\u1a70\0\57\0\u1a9f"+
    "\0\57\0\57\0\u1ace\0\57\0\u1afd\0\u1b2c\0\57\0\57"+
    "\0\57\0\u1b5b\0\u1b8a\0\57\0\57\0\u1bb9\0\u1be8\0\u1c17"+
    "\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\57\0\57"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\0\1\2\1\11\1\10\1\12\1\13\1\14"+
    "\1\4\1\15\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\6\4\1\23\1\24\1\25\1\3\1\4\1\26\1\27"+
    "\1\30\1\31\1\4\1\32\4\7\1\33\1\34\57\0"+
    "\1\35\1\3\4\35\2\36\2\0\1\37\1\36\25\35"+
    "\1\3\7\35\4\36\2\35\2\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\21\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\6\0\1\10\3\0\1\10\3\0\1\10"+
    "\2\0\1\42\37\0\1\35\1\36\4\35\2\36\2\0"+
    "\1\37\1\36\25\35\1\36\7\35\4\36\3\35\1\36"+
    "\1\43\1\44\1\45\1\35\1\36\1\7\2\0\1\37"+
    "\1\36\2\35\21\43\2\35\1\36\1\43\4\35\1\43"+
    "\1\35\4\7\2\35\4\0\1\10\3\0\1\10\3\0"+
    "\1\10\57\0\1\46\43\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\1\4\1\47\2\4\1\50\14\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\41\2\0\1\4\6\0\7\4\1\51\11\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\41\2\0\1\4\6\0\1\52\10\4\1\53\7\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\1\54\20\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\41\2\0\1\4\6\0\1\55\20\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\1\4\1\56\17\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\15\4\1\57\1\60\2\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\61\2\0\1\4\6\0\21\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\17\4\1\62\1\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\53\0\1\63\1\64\5\0\1\36"+
    "\4\0\2\36\3\0\1\36\25\0\1\36\7\0\4\36"+
    "\3\0\1\65\4\0\1\36\1\65\3\0\1\65\25\0"+
    "\1\65\7\0\4\65\4\0\1\66\1\40\3\0\1\66"+
    "\6\0\21\66\3\0\1\66\4\0\1\66\1\0\4\66"+
    "\4\0\1\67\1\0\1\41\2\0\1\67\6\0\21\67"+
    "\3\0\1\67\4\0\1\67\1\0\4\67\35\0\1\70"+
    "\24\0\1\36\1\4\1\40\1\41\1\0\1\36\1\7"+
    "\3\0\1\36\2\0\21\4\2\0\1\36\1\4\4\0"+
    "\1\4\1\0\4\7\3\0\1\36\1\66\1\40\2\0"+
    "\1\36\1\71\3\0\1\36\2\0\21\66\2\0\1\36"+
    "\1\66\4\0\1\66\1\0\4\71\3\0\1\36\1\67"+
    "\1\0\1\41\1\0\1\36\1\72\3\0\1\36\2\0"+
    "\21\67\2\0\1\36\1\67\4\0\1\67\1\0\4\72"+
    "\2\0\10\46\2\0\45\46\2\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\1\73\20\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\11\4\1\74\6\4\1\75\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\21\4\3\0\1\76\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\3\4\1\77\15\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\12\4\1\100\6\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\21\4\3\0\1\4\4\0\1\101\1\0\4\4"+
    "\4\0\1\4\1\40\1\41\2\0\1\4\6\0\1\4"+
    "\1\102\3\4\1\103\13\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\5\4\1\104\2\4\1\105\10\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\5\4\1\106\13\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\7\4\1\107\11\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\67\1\0\1\41"+
    "\2\0\1\67\6\0\21\67\1\110\2\0\1\67\4\0"+
    "\1\67\1\0\4\67\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\16\4\1\111\2\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\54\0\1\112\60\0\1\112\2\0"+
    "\1\113\1\114\4\113\1\115\1\114\2\0\1\113\1\114"+
    "\25\113\1\114\7\113\4\114\2\113\2\0\1\66\1\0"+
    "\1\41\2\0\1\66\6\0\21\66\3\0\1\66\4\0"+
    "\1\66\1\0\4\66\4\0\1\67\1\116\1\41\1\117"+
    "\1\0\1\67\6\0\21\67\3\0\1\67\4\0\1\67"+
    "\1\0\4\67\24\0\1\120\34\0\1\35\1\36\1\121"+
    "\1\35\1\45\1\35\1\36\1\71\2\0\1\37\1\36"+
    "\2\35\21\121\2\35\1\36\1\121\4\35\1\121\1\35"+
    "\4\71\3\35\1\36\1\122\1\123\1\45\1\124\1\36"+
    "\1\72\2\0\1\37\1\36\2\35\21\122\2\35\1\36"+
    "\1\122\4\35\1\122\1\35\4\72\2\35\2\0\1\4"+
    "\1\40\1\41\1\0\1\125\1\4\6\0\21\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\41\2\0\1\4\6\0\21\4\3\0\1\126\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\17\4\1\127\1\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\17\4\1\130\1\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\5\4\1\131\13\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\3\4\1\132\15\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\41\1\0"+
    "\1\133\1\4\6\0\21\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\11\4\1\134\7\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\11\4\1\135\7\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\11\4\1\136\7\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\16\4\1\137\2\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\17\4\1\140\1\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\7\4\1\141\11\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\55\0\1\142\4\0\1\65\4\0\1\36"+
    "\1\143\3\0\1\65\25\0\1\65\7\0\4\143\2\0"+
    "\1\113\1\114\4\113\1\115\1\143\2\0\1\113\1\114"+
    "\25\113\1\114\7\113\4\143\2\113\1\35\1\65\4\35"+
    "\1\36\1\143\2\0\1\37\1\65\25\35\1\65\7\35"+
    "\4\143\2\35\2\0\1\66\1\117\1\41\1\117\1\0"+
    "\1\66\6\0\21\66\3\0\1\66\4\0\1\66\1\0"+
    "\4\66\4\0\1\66\1\117\1\0\1\117\1\0\1\66"+
    "\6\0\21\66\3\0\1\66\4\0\1\66\1\0\4\66"+
    "\32\0\1\144\27\0\1\36\1\66\1\0\1\41\1\0"+
    "\1\36\1\71\3\0\1\36\2\0\21\66\2\0\1\36"+
    "\1\66\4\0\1\66\1\0\4\71\3\0\1\36\1\67"+
    "\1\116\1\41\1\117\1\36\1\72\3\0\1\36\2\0"+
    "\21\67\2\0\1\36\1\67\4\0\1\67\1\0\4\72"+
    "\3\0\1\36\1\66\1\117\1\41\1\117\1\36\1\71"+
    "\3\0\1\36\2\0\21\66\2\0\1\36\1\66\4\0"+
    "\1\66\1\0\4\71\3\0\1\36\1\66\1\117\1\0"+
    "\1\117\1\36\1\71\3\0\1\36\2\0\21\66\2\0"+
    "\1\36\1\66\4\0\1\66\1\0\4\71\22\0\1\145"+
    "\40\0\1\4\1\40\1\41\2\0\1\4\6\0\7\4"+
    "\1\146\11\4\3\0\1\4\4\0\1\4\1\0\4\4"+
    "\4\0\1\4\1\40\1\41\2\0\1\4\6\0\1\147"+
    "\20\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\2\0\1\4\6\0\1\150\20\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\11\4\1\151\7\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\11\4\1\152\7\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\22\0\1\153"+
    "\40\0\1\4\1\40\1\41\1\0\1\154\1\4\6\0"+
    "\21\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\2\0\1\4\6\0\10\4\1\155"+
    "\10\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\2\0\1\4\6\0\12\4\1\156"+
    "\6\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\2\0\1\4\6\0\4\4\1\157"+
    "\14\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\2\0\1\4\6\0\20\4\1\160"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\12\4\1\161\6\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\2\0\1\113"+
    "\1\114\4\113\1\115\1\162\2\0\1\113\1\114\25\113"+
    "\1\114\7\113\4\162\2\113\35\0\1\163\42\0\1\164"+
    "\37\0\1\4\1\40\1\41\2\0\1\4\6\0\1\4"+
    "\1\165\17\4\3\0\1\4\4\0\1\4\1\0\4\4"+
    "\4\0\1\4\1\40\1\41\2\0\1\4\6\0\4\4"+
    "\1\166\14\4\3\0\1\4\4\0\1\4\1\0\4\4"+
    "\4\0\1\4\1\40\1\41\2\0\1\4\6\0\3\4"+
    "\1\167\15\4\3\0\1\4\4\0\1\4\1\0\4\4"+
    "\4\0\1\4\1\40\1\41\1\0\1\170\1\4\6\0"+
    "\21\4\3\0\1\4\4\0\1\4\1\0\4\4\4\0"+
    "\1\4\1\40\1\41\1\0\1\171\1\4\6\0\21\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\23\0\1\172"+
    "\61\0\1\173\34\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\7\4\1\174\11\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\7\4\1\175\11\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\1\4\1\176\17\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\15\4\1\177\3\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\4\0\1\4\1\40\1\41\2\0\1\4"+
    "\6\0\11\4\1\200\7\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\27\0\1\201\53\0\1\202\36\0\1\4"+
    "\1\40\1\41\1\0\1\203\1\4\6\0\21\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\41\2\0\1\4\6\0\1\204\20\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\11\4\1\205\7\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\20\0\1\206\5\0\1\207"+
    "\50\0\1\210\5\0\1\211\54\0\1\212\52\0\1\213"+
    "\42\0\1\4\1\40\1\214\2\0\1\4\6\0\21\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\13\4\1\215\5\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\11\4\1\216\7\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\4"+
    "\1\40\1\41\1\0\1\217\1\4\6\0\21\4\3\0"+
    "\1\4\4\0\1\4\1\0\4\4\4\0\1\4\1\40"+
    "\1\220\2\0\1\4\6\0\21\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\6\0\1\221\75\0\1\222\51\0"+
    "\1\223\5\0\1\224\34\0\1\4\1\40\1\41\2\0"+
    "\1\4\6\0\17\4\1\225\1\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\4\0\1\4\1\40\1\226\2\0"+
    "\1\4\6\0\21\4\3\0\1\4\4\0\1\4\1\0"+
    "\4\4\21\0\1\227\55\0\1\230\57\0\1\231\55\0"+
    "\1\232\63\0\1\233\52\0\1\234\41\0\1\67\1\0"+
    "\1\41\2\0\1\67\6\0\21\67\1\235\2\0\1\67"+
    "\4\0\1\67\1\0\4\67\4\0\1\4\1\40\1\41"+
    "\2\0\1\4\6\0\11\4\1\236\7\4\3\0\1\4"+
    "\4\0\1\4\1\0\4\4\4\0\1\4\1\40\1\237"+
    "\2\0\1\4\6\0\21\4\3\0\1\4\4\0\1\4"+
    "\1\0\4\4\20\0\1\240\5\0\1\241\34\0\1\67"+
    "\1\0\1\41\2\0\1\67\6\0\21\67\1\242\2\0"+
    "\1\67\4\0\1\67\1\0\4\67\41\0\1\243\36\0"+
    "\1\244\55\0\1\245\42\0\1\4\1\40\1\246\2\0"+
    "\1\4\6\0\21\4\3\0\1\4\4\0\1\4\1\0"+
    "\4\4\4\0\1\67\1\0\1\41\2\0\1\67\6\0"+
    "\21\67\1\247\2\0\1\67\4\0\1\67\1\0\4\67"+
    "\6\0\1\250\71\0\1\251\56\0\1\252\41\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\14\4\1\253\4\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\4\0\1\67"+
    "\1\0\1\41\2\0\1\67\6\0\21\67\1\254\2\0"+
    "\1\67\4\0\1\67\1\0\4\67\21\0\1\255\55\0"+
    "\1\256\44\0\1\257\71\0\1\260\41\0\1\67\1\0"+
    "\1\41\2\0\1\67\6\0\21\67\1\261\2\0\1\67"+
    "\4\0\1\67\1\0\4\67\32\0\1\262\30\0\1\4"+
    "\1\40\1\41\2\0\1\4\6\0\15\4\1\263\3\4"+
    "\3\0\1\4\4\0\1\4\1\0\4\4\20\0\1\264"+
    "\57\0\1\265\72\0\1\266\25\0\1\4\1\40\1\41"+
    "\1\0\1\267\1\4\6\0\21\4\3\0\1\4\4\0"+
    "\1\4\1\0\4\4\37\0\1\270\37\0\1\271\5\0"+
    "\1\272\64\0\1\273\43\0\1\274\55\0\1\275\65\0"+
    "\1\276\47\0\1\277\57\0\1\300\43\0\1\301\111\0"+
    "\1\302\23\0\1\303\113\0\1\304\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7661];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\5\11\1\1\3\11\6\0\1\1"+
    "\2\0\13\1\1\0\1\1\3\0\2\1\1\0\17\1"+
    "\1\11\1\1\4\0\1\1\2\0\3\1\2\0\5\1"+
    "\1\0\6\1\1\11\3\0\5\1\2\0\6\1\2\0"+
    "\3\1\4\0\5\1\3\0\2\1\7\0\2\1\3\0"+
    "\1\11\2\0\1\1\3\0\1\11\1\0\3\11\1\1"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\1\1\11\2\0\3\11\1\0\1\1\2\11\11\0"+
    "\2\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    Info_code c = new Info_code();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { c.linea=yyline; return ERROR;
            } 
            // fall through
          case 39: break;
          case 2: 
            { c.linea=yyline;lexeme=yytext(); return Numero;
            } 
            // fall through
          case 40: break;
          case 3: 
            { c.linea=yyline;lexeme=yytext(); return Cadena;
            } 
            // fall through
          case 41: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 42: break;
          case 5: 
            { c.linea=yyline;lexeme=yytext(); return Resta;
            } 
            // fall through
          case 43: break;
          case 6: 
            { c.linea=yyline;lexeme=yytext(); return Diagonal;
            } 
            // fall through
          case 44: break;
          case 7: 
            { c.linea=yyline;lexeme=yytext(); return Igual;
            } 
            // fall through
          case 45: break;
          case 8: 
            { c.linea=yyline;lexeme=yytext(); return Suma;
            } 
            // fall through
          case 46: break;
          case 9: 
            { c.linea=yyline;lexeme=yytext(); return Parentesis_Apertura;
            } 
            // fall through
          case 47: break;
          case 10: 
            { c.linea=yyline;lexeme=yytext(); return Parentesis_Cierre;
            } 
            // fall through
          case 48: break;
          case 11: 
            { c.linea=yyline;lexeme=yytext(); return Multiplicar;
            } 
            // fall through
          case 49: break;
          case 12: 
            { c.linea=yyline;lexeme=yytext(); return Punto;
            } 
            // fall through
          case 50: break;
          case 13: 
            { c.linea=yyline;lexeme=yytext(); return Punto_y_Coma;
            } 
            // fall through
          case 51: break;
          case 14: 
            { c.linea=yyline;lexeme=yytext(); return Comillas;
            } 
            // fall through
          case 52: break;
          case 15: 
            { c.linea=yyline;lexeme=yytext(); return Dos_Puntos;
            } 
            // fall through
          case 53: break;
          case 16: 
            { c.linea=yyline;lexeme=yytext(); return Titulo;
            } 
            // fall through
          case 54: break;
          case 17: 
            { c.linea=yyline;lexeme=yytext(); return Variable;
            } 
            // fall through
          case 55: break;
          case 18: 
            { c.linea=yyline;lexeme=yytext(); return Formato_Imagen;
            } 
            // fall through
          case 56: break;
          case 19: 
            { c.linea=yyline;lexeme=yytext(); return Email;
            } 
            // fall through
          case 57: break;
          case 20: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Documento;
            } 
            // fall through
          case 58: break;
          case 21: 
            { c.linea=yyline;lexeme=yytext(); return Lista_Entrada;
            } 
            // fall through
          case 59: break;
          case 22: 
            { c.linea=yyline;lexeme=yytext(); return Cierre_Documento;
            } 
            // fall through
          case 60: break;
          case 23: 
            { c.linea=yyline;lexeme=yytext(); return Fin_Fila;
            } 
            // fall through
          case 61: break;
          case 24: 
            { c.linea=yyline;lexeme=yytext(); return Link;
            } 
            // fall through
          case 62: break;
          case 25: 
            { c.linea=yyline;lexeme=yytext(); return Parrafo;
            } 
            // fall through
          case 63: break;
          case 26: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Imagen;
            } 
            // fall through
          case 64: break;
          case 27: 
            { c.linea=yyline;lexeme=yytext(); return Negrilla;
            } 
            // fall through
          case 65: break;
          case 28: 
            { c.linea=yyline;lexeme=yytext(); return Cierre_Tabla;
            } 
            // fall through
          case 66: break;
          case 29: 
            { c.linea=yyline;lexeme=yytext(); return Lista_Fin;
            } 
            // fall through
          case 67: break;
          case 30: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Columna;
            } 
            // fall through
          case 68: break;
          case 31: 
            { c.linea=yyline;lexeme=yytext(); return Nombre;
            } 
            // fall through
          case 69: break;
          case 32: 
            { c.linea=yyline;lexeme=yytext(); return Cierre_Imagen;
            } 
            // fall through
          case 70: break;
          case 33: 
            { c.linea=yyline;lexeme=yytext(); return Imprimir;
            } 
            // fall through
          case 71: break;
          case 34: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Cuerpo;
            } 
            // fall through
          case 72: break;
          case 35: 
            { c.linea=yyline;lexeme=yytext(); return Fin_Cuerpo;
            } 
            // fall through
          case 73: break;
          case 36: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Encabezado;
            } 
            // fall through
          case 74: break;
          case 37: 
            { c.linea=yyline;lexeme=yytext(); return Cierre_Encabezado;
            } 
            // fall through
          case 75: break;
          case 38: 
            { c.linea=yyline;lexeme=yytext(); return Apertura_Tabla;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
