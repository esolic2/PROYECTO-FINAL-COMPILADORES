
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\006\000\002\003\003\000\002\003\035\000\002" +
    "\003\037\000\002\003\032\000\002\003\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\006\000\002\003\006\000\002\003\031\000" +
    "\002\003\007\000\002\003\003\000\002\003\003\000\002" +
    "\003\011\000\002\003\031\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\054\004\021\005\005\007\025\010\007\011" +
    "\004\012\012\013\017\020\013\022\022\024\024\026\014" +
    "\027\023\033\006\034\027\035\030\036\010\040\020\043" +
    "\011\045\031\046\015\047\026\001\002\000\056\002\uffe6" +
    "\004\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\020\uffe6\022\uffe6\024\uffe6\026\uffe6\027\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\040\uffe6\043\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\001\002\000\056\002\uffe5\004\uffe5\005\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\020\uffe5\022" +
    "\uffe5\024\uffe5\026\uffe5\027\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\001" +
    "\002\000\004\016\176\001\002\000\056\002\ufffb\004\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\020" +
    "\ufffb\022\ufffb\024\ufffb\026\ufffb\027\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\040\ufffb\043\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\001\002\000\004\027\173\001\002\000\004\013\165" +
    "\001\002\000\004\015\161\001\002\000\056\002\ufffa\004" +
    "\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\020\ufffa\022\ufffa\024\ufffa\026\ufffa\027\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\040\ufffa\043\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\001\002\000\056\002\ufff7\004\ufff7\005\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\020\ufff7\022\ufff7" +
    "\024\ufff7\026\ufff7\027\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\040\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002" +
    "\000\056\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\020\ufff3\022\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\043" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002\000\056\002\000" +
    "\004\021\005\005\007\025\010\007\011\004\012\012\013" +
    "\017\020\013\022\022\024\024\026\014\027\023\033\006" +
    "\034\027\035\030\036\010\040\020\043\011\045\031\046" +
    "\015\047\026\001\002\000\056\002\ufff9\004\ufff9\005\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\020\ufff9\022" +
    "\ufff9\024\ufff9\026\ufff9\027\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\040\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9\001" +
    "\002\000\056\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\020\uffe9\022\uffe9\024\uffe9\026" +
    "\uffe9\027\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\047\uffe9\001\002\000\004\006" +
    "\157\001\002\000\004\043\072\001\002\000\006\013\067" +
    "\033\066\001\002\000\004\051\040\001\002\000\056\002" +
    "\ufffc\004\ufffc\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\020\ufffc\022\ufffc\024\ufffc\026\ufffc\027\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\043\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\001\002\000\056\002\uffef\004\uffef\005" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\020\uffef" +
    "\022\uffef\024\uffef\026\uffef\027\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\040\uffef\043\uffef\045\uffef\046\uffef\047\uffef" +
    "\001\002\000\004\013\034\001\002\000\056\002\uffea\004" +
    "\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\020\uffea\022\uffea\024\uffea\026\uffea\027\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\040\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\001\002\000\056\002\ufff2\004\ufff2\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\020\ufff2\022\ufff2" +
    "\024\ufff2\026\ufff2\027\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\040\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\001\002" +
    "\000\004\002\033\001\002\000\004\002\001\001\002\000" +
    "\004\013\035\001\002\000\004\013\036\001\002\000\004" +
    "\013\037\001\002\000\056\002\uffeb\004\uffeb\005\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002" +
    "\000\004\043\041\001\002\000\004\013\042\001\002\000" +
    "\004\043\043\001\002\000\004\040\044\001\002\000\004" +
    "\043\045\001\002\000\004\013\046\001\002\000\004\032" +
    "\047\001\002\000\004\013\050\001\002\000\004\032\051" +
    "\001\002\000\004\013\052\001\002\000\004\041\053\001" +
    "\002\000\004\013\054\001\002\000\004\042\055\001\002" +
    "\000\004\043\056\001\002\000\004\013\057\001\002\000" +
    "\004\044\060\001\002\000\004\033\061\001\002\000\004" +
    "\013\062\001\002\000\004\044\063\001\002\000\004\033" +
    "\064\001\002\000\004\025\065\001\002\000\056\002\uffe7" +
    "\004\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\020\uffe7\022\uffe7\024\uffe7\026\uffe7\027\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\040\uffe7\043\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\001\002\000\004\030\071\001\002\000\004" +
    "\030\070\001\002\000\056\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\020\ufff1\022\ufff1" +
    "\024\ufff1\026\ufff1\027\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\040\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002" +
    "\000\056\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\020\ufff0\022\ufff0\024\ufff0\026\ufff0" +
    "\027\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\043" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\006\013\074" +
    "\033\073\001\002\000\004\043\076\001\002\000\004\043" +
    "\075\001\002\000\056\002\ufff8\004\ufff8\005\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\020\ufff8\022\ufff8\024" +
    "\ufff8\026\ufff8\027\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\040\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002\000" +
    "\004\022\077\001\002\000\004\043\100\001\002\000\004" +
    "\013\101\001\002\000\004\043\102\001\002\000\004\022" +
    "\103\001\002\000\004\043\104\001\002\000\004\013\105" +
    "\001\002\000\004\043\106\001\002\000\004\022\107\001" +
    "\002\000\004\043\110\001\002\000\006\027\112\033\111" +
    "\001\002\000\006\017\131\031\132\001\002\000\004\033" +
    "\113\001\002\000\004\016\114\001\002\000\004\033\115" +
    "\001\002\000\004\030\116\001\002\000\004\031\117\001" +
    "\002\000\004\033\120\001\002\000\004\032\121\001\002" +
    "\000\004\033\122\001\002\000\004\043\123\001\002\000" +
    "\004\022\124\001\002\000\004\043\125\001\002\000\004" +
    "\014\126\001\002\000\004\043\127\001\002\000\004\026" +
    "\130\001\002\000\056\002\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\020\ufff5\022\ufff5\024" +
    "\ufff5\026\ufff5\027\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\040\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002\000" +
    "\004\033\147\001\002\000\004\033\133\001\002\000\004" +
    "\043\134\001\002\000\004\022\135\001\002\000\004\043" +
    "\136\001\002\000\004\014\137\001\002\000\004\043\140" +
    "\001\002\000\006\022\142\026\141\001\002\000\056\002" +
    "\uffec\004\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\020\uffec\022\uffec\024\uffec\026\uffec\027\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\040\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\001\002\000\004\024\143\001\002\000" +
    "\004\013\144\001\002\000\004\025\145\001\002\000\004" +
    "\026\146\001\002\000\056\002\ufff6\004\ufff6\005\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\020\ufff6\022\ufff6" +
    "\024\ufff6\026\ufff6\027\ufff6\033\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\040\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002" +
    "\000\004\043\150\001\002\000\004\022\151\001\002\000" +
    "\004\043\152\001\002\000\004\014\153\001\002\000\004" +
    "\043\154\001\002\000\004\026\155\001\002\000\004\023" +
    "\156\001\002\000\056\002\ufff4\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\020\ufff4\022\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\040\ufff4\043\ufff4\045\ufff4\046\ufff4\047\ufff4\001\002\000" +
    "\056\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\020\ufffe\022\ufffe\024\ufffe\026\ufffe\027" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\043\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\004\043\162\001\002\000\004\013\163\001\002" +
    "\000\004\043\164\001\002\000\056\002\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\020\ufffd" +
    "\022\ufffd\024\ufffd\026\ufffd\027\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\040\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\001\002\000\004\032\166\001\002\000\004\013\167\001" +
    "\002\000\004\032\170\001\002\000\004\013\171\001\002" +
    "\000\004\043\172\001\002\000\056\002\uffe8\004\uffe8\005" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\020\uffe8" +
    "\022\uffe8\024\uffe8\026\uffe8\027\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\040\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\001\002\000\004\047\174\001\002\000\004\030\175\001" +
    "\002\000\056\002\uffed\004\uffed\005\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\020\uffed\022\uffed\024\uffed\026" +
    "\uffed\027\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed" +
    "\043\uffed\045\uffed\046\uffed\047\uffed\001\002\000\004\033" +
    "\177\001\002\000\004\037\200\001\002\000\056\002\uffee" +
    "\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\020\uffee\022\uffee\024\uffee\026\uffee\027\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\040\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\031\003\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\157\003\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    private Symbol s;
     
    public void syntax_error(Symbol s){
        this.s = s;
        
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {
  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= E 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= E INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= Apertura_Documento Apertura_Encabezado 
            {
              String RESULT =null;
		 String a = "<html>\n "+ "<link " +"rel="+"\"icon\" "+" href=" +"\"C:/Users/wilbe/Desktop/7semestre/COMPILADOR/Proyecto_Final/src/Imagenes/umg.png\""+" type= "+ "\"image/png\""+ "/>\n <center><h1>CONVERSION A LENGUAJE HTML</h1></center>\n"+ 
                                "<head>\n"+ 
                                " <style>\n" +
                                "table, th, td{\n"+	
                                "border : 1px solid white;}\n </style>\n";
                                 resultado += String.valueOf(a);
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= Titulo Igual Comillas Cadena Comillas 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		String a = "<title>"+b+"\n"+"</title>\n";
                                 resultado+= String.valueOf(a); 
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= Cierre_Encabezado 
            {
              String RESULT =null;
		String a="</head>\n";
                                resultado+= String.valueOf(a);
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= Apertura_Cuerpo 
            {
              String RESULT =null;
		  String a ="<body background="+"\"C:/Users/wilbe/Desktop/7semestre/COMPILADOR/Proyecto_Final/src/Imagenes/fondo.jpg\""+">\n";
                                  resultado += String.valueOf(a);
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= Apertura_Tabla 
            {
              String RESULT =null;
		 String a ="<table  style ="+ "width: 100%>\n";
                                  resultado += String.valueOf(a);
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= Cadena 
            {
              String RESULT =null;
		String a= "<tr>\n";
                            resultado += String.valueOf(a);
                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= Apertura_Columna Comillas Cadena Comillas 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		String a = "<th>"+b+"</th>\n";
                                  resultado += String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= Fin_Fila 
            {
              String RESULT =null;
		String a = "</tr>";
                                  resultado += String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= Apertura_Columna Comillas Numero Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Numero Multiplicar Numero Comillas Apertura_Columna Comillas Email Comillas Apertura_Columna Apertura_Imagen Cadena Cierre_Imagen Fin_Fila 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-24)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-24)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-24)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		 
                                String a = "<td>"+b+"</td>\n <td>"+c+"</td>\n <td>"+d+"</td>\n <td>"+e+f+g+"</td>\n <td>"+h+"</td>\n <td> <img src="+"\"C:/Users/wilbe/Desktop/7semestre/COMPILADOR/Proyecto_Final/src/Imagenes/umg.png\""+ "style="+"\"width:75px;height:75px;\""+"></td>\n </tr>";
                                resultado +=String.valueOf(a);
                             
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-26)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= Apertura_Columna Comillas Numero Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Parentesis_Apertura Numero Suma Numero Parentesis_Cierre Multiplicar Numero Punto Numero Comillas Apertura_Columna Comillas Email Comillas Fin_Fila 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-26)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-26)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-26)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		
                                String a = " <td>"+b+"</td>\n <td>"+c+"</td>\n <td>" +d+"</td>\n <td>"+f+e+g+h+i+j+k+l+m+"</td>\n <td>"+n+"</td>\n </tr>\n";
                                 resultado +=String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-28)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= Apertura_Columna Comillas Numero Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Numero Resta Numero Comillas Apertura_Columna Comillas Email Comillas Fin_Fila Cierre_Tabla 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-21)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-21)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-21)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-17)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-17)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-17)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		
                                String a = " <td>"+b+"</td>\n <td>"+c+"</td>\n <td>" +d+"</td>\n <td>"+e+f+g+"</td>\n <td>"+h+"</td>\n </tr>\n </table>\n";
                                 resultado +=String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= Parrafo 
            {
              String RESULT =null;
		String a= " <p>\n";
                               resultado +=String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= Negrilla 
            {
              String RESULT =null;
		String a= " <br>\n <b>";
                               resultado +=String.valueOf(a);
                              
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= Parentesis_Apertura Cadena Parentesis_Cierre 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                                String a =  ""+b+c+d +"</b> <br>\n";
                                resultado +=String.valueOf(a);
                               
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= Parentesis_Apertura Numero Parentesis_Cierre 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                                String a = ""+b+c+d +"</b> <br>\n ";
                                resultado +=String.valueOf(a);
                               
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= Variable 
            {
              String RESULT =null;
		String a = "A";
                                resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= Numero Suma Numero Punto_y_Coma 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                               String a= "<script type="+"\"text/javascript\""+">\n"+ 
                                         "function Sumar()\n"+
                                         "{\n"+ 
                                         "var n1=0;\n"+
                                         "var n2=0;\n"+ 
                                         "var resultado=0;\n"+ 
                                         "n1 = parseInt("+b+");\n"+
                                         "n2 = parseInt("+d+");\n"+ 
                                         "A= n1"+c+"n2;\n"+
                               "alert("+
                               "\"La suma de los numeros\""+ 
                               "+ n1 +"+ 
                               "\"mas\""+
                              "+ n2+"+ "\"es =\""+ "+A);}\n </script>\n";
                               resultado+=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= Imprimir Parentesis_Apertura Variable Parentesis_Cierre 
            {
              String RESULT =null;
		 
                               String a = "<button type="+"\"button\""+ "onclick ="+"\"Sumar()\""+">Suma de dos Numeros </button>\n";
                               resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= Apertura_Columna Comillas Numero Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Cadena Comillas Apertura_Columna Comillas Numero Multiplicar Numero Comillas Apertura_Columna Comillas Email Comillas Fin_Fila 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		 
                                String a = "<td>"+b+"</td>\n <td>"+c+"</td>\n <td>"+d+"</td>\n <td>"+e+f+g+"</td>\n <td>"+h+"</td>\n </tr>";
                                resultado +=String.valueOf(a);
                                  
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= Lista_Entrada Cadena Cadena Cadena Cadena 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                                String a = "<ul>\n <li> "+b+" </li>\n"+
                                           "<li> "+c+" </li>\n"+
                                           "<li> "+d+" </li>\n"+
                                           "<li> "+e+" </li>\n";
                                resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= Lista_Fin 
            {
              String RESULT =null;
		
                                String a ="</ul>\n";
                                resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= Link 
            {
              String RESULT =null;
		String a= "<p>\n <a href=";
                                resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= Comillas Cadena Punto Cadena Punto Cadena Comillas 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                                String a= "https://"+b+c+d+e+f+">Ingresa a Google</a>\n </p>\n";
                                resultado +=String.valueOf(a);
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= Apertura_Imagen Nombre Comillas Cadena Comillas Link Comillas Cadena Punto Cadena Punto Cadena Diagonal Cadena Formato_Imagen Comillas Cadena Dos_Puntos Numero Cadena Dos_Puntos Numero Cierre_Imagen 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-20)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-19)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-19)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-19)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-18)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-16)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-13)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		
                                      String a= ""+b+c+d+"<a href="+e+f+g+h+i+j+l+m+o+k+"style="+"\"width:150;height:100px;\""+">\n </img>\n";
                                      resultado +=String.valueOf(a);
                                      
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-22)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= Fin_Cuerpo 
            {
              String RESULT =null;
		String a="</body>\n";
                                  resultado +=String.valueOf(a);
                                 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= Cierre_Documento 
            {
              String RESULT =null;
		String a="</html>";
                                    resultado +=String.valueOf(a);
                                   
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }    
}

}
